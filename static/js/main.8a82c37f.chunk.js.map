{"version":3,"sources":["components/time.js","components/button1.js","components/button2.js","components/buttonBreak.js","components/card.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TimeStyled","styled","div","props","color","Time","time","minutes","Math","floor","toString","padStart","seconds","className","Button1Styled","button","ButtonPomodoro","handleStart","onClick","Button2Styled","Button2","text","buttonRef","coundownState","active","currentTime","useRef","useEffect","current","ref","ButtonbreakStyled","Buttonbreak","Card","useState","controls","setControls","timePomodoro","setTimePomodoro","timeBreak","setTimeBreak","pomodoroActive","setPomodoroActive","setTime","setColor","setButtonRef","buttonActive","setButtonActive","intervalo","breakInterval","handleStartCountdown","clearInterval","setInterval","prevState","handleStartBreak","textContent","toLowerCase","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a82c37f.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TimeStyled = styled.div`\n  background: ${(props) => props.color || \"var(--pink)\"};\n  .countdown {\n    color: ${(props) => props.color || \"var(--pink)\"};\n  }\n`;\n\nfunction Time({ time, color }) {\n  let minutes = Math.floor(time / 60)\n    .toString()\n    .padStart(2, \"00\");\n  let seconds = Math.floor(time % 60)\n    .toString()\n    .padStart(2, \"00\");\n\n  return (\n    <TimeStyled className=\"countdown-container\" color={color}>\n      <div className=\"countdown-content\">\n        <span className=\"countdown\">{`${minutes}:${seconds}`}</span>\n      </div>\n    </TimeStyled>\n  );\n}\n\nexport default Time;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button1Styled = styled.button``;\n\nfunction ButtonPomodoro({ handleStart }) {\n  return (\n    <Button1Styled className=\"button start-countdown\" onClick={handleStart}>\n      Start Pomodoro\n    </Button1Styled>\n  );\n}\n\nexport default ButtonPomodoro;\n","import React, { useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst Button2Styled = styled.button``;\n\nfunction Button2({ text, buttonRef, coundownState, active, currentTime }) {\n  const button = useRef(null);\n  useEffect(() => {\n    buttonRef(button.current);\n  }, [buttonRef]);\n\n  return (\n    <Button2Styled\n      className={\n        active\n          ? \"button pause-countdown active\"\n          : \"button pause-countdown disabled\"\n      }\n      ref={button}\n      onClick={coundownState}\n    >\n      {currentTime\n        ? text\n          ? \"Pause pomodoro\"\n          : \"Play Pomodoro\"\n        : text\n        ? \"Pause Break\"\n        : \"Play Break\"}\n    </Button2Styled>\n  );\n}\n\nexport default Button2;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ButtonbreakStyled = styled.button``;\n\nfunction Buttonbreak({ handleStart }) {\n  return (\n    <ButtonbreakStyled className=\"button start-countdown\" onClick={handleStart}>\n      Start Break\n    </ButtonbreakStyled>\n  );\n}\n\nexport default Buttonbreak;\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable no-unused-vars */\nimport React, { useState, useRef } from \"react\";\nimport \"../css/card.css\";\nimport Time from \"./time\";\nimport ButtonPomodoro from \"./button1\";\nimport Button2 from \"./button2\";\nimport Buttonbreak from \"./buttonBreak\";\n\nfunction Card() {\n  ///false = play , true = pause\n  const [controls, setControls] = useState(false);\n\n  //tiempo de la cuenta regresiva\n  const [timePomodoro, setTimePomodoro] = useState(1500);\n  const [timeBreak, setTimeBreak] = useState(20);\n  const [pomodoroActive, setPomodoroActive] = useState(true);\n  const [time, setTime] = useState(true);\n  //color del cronÃ³metro\n  const [color, setColor] = useState(\"var(--pink)\");\n\n  //button2\n  const [buttonRef, setButtonRef] = useState();\n  const [buttonActive, setButtonActive] = useState(false);\n\n  const intervalo = useRef(null);\n  const breakInterval = useRef(null);\n\n  if (timePomodoro === 0) {\n    clearInterval(intervalo.current);\n    // handleStartBreak();\n  }\n  if (timeBreak === 0) {\n    clearInterval(breakInterval.current);\n    // handleStartCountdown();\n  }\n\n  function handleStartCountdown() {\n    clearInterval(breakInterval.current);\n    setTime(true);\n    setPomodoroActive(false);\n    setButtonActive(true); //estilo activo al boton de pause/play\n    setControls(true); //cambiando el label del boton a pause\n\n    // setTimePomodoro(1500);\n    setColor(\"var(--pink)\");\n    intervalo.current = setInterval(() => {\n      setTimePomodoro((prevState) => prevState - 1);\n    }, 1000);\n  }\n\n  function handleStartBreak() {\n    clearInterval(intervalo.current);\n    setTime(false);\n    setPomodoroActive(true);\n    setButtonActive(true); //estilo activo al boton de pause/play\n    setControls(true); //cambiando el label del boton a pause\n\n    // setTimeBreak(20);\n    setColor(\"var(--green)\");\n    breakInterval.current = setInterval(() => {\n      setTimeBreak((prevState) => prevState - 1);\n    }, 1000);\n  }\n\n  function coundownState() {\n    const labelButton = buttonRef.textContent.toLowerCase();\n    if (labelButton.includes(\"pause\")) {\n      setControls(false);\n      clearInterval(intervalo.current);\n      clearInterval(breakInterval.current);\n    } else {\n      setControls(true);\n      if (pomodoroActive) {\n        handleStartBreak();\n      } else {\n        handleStartCountdown();\n      }\n    }\n  }\n\n  return (\n    <div className=\"card-container  animate__animated animate__bounceInDown\">\n      <div className=\"card-content\">\n        <h2 className=\"title\">Pomodoro Tracker</h2>\n        <Time time={time ? timePomodoro : timeBreak} color={color} />\n        {pomodoroActive ? (\n          <ButtonPomodoro handleStart={handleStartCountdown} />\n        ) : (\n          <Buttonbreak handleStart={handleStartBreak} />\n        )}\n        <Button2\n          buttonRef={setButtonRef}\n          text={controls}\n          coundownState={coundownState}\n          active={buttonActive}\n          currentTime={time}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './components/card'\nfunction App() {\n  return (\n    <>\n      <Card/>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}